#!/bin/bash


# Get the name of the file containing the commit message
COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Get only the diff of what has already been staged
git_diff_output=$(git diff --cached)

# Check if there are any staged changes to commit
if [ -z "$git_diff_output" ]; then
  echo "No staged changes detected. Aborting."
  exit 1
fi

# Limit the number of lines sent to AI to avoid overwhelming it
git_diff_output_limited=$(echo "$git_diff_output" | head -n 1000)

# Prepare the AI prompt for the chat model
messages=$(jq -n --arg diff "$git_diff_output_limited" '[
  {"role": "system", "content": "You are an AI assistant that helps generate git commit messages based on code changes."},
  {"role": "user", "content": ("Suggest an informative commit message by summarizing code changes from the shared command output. 
    The commit message should follow the conventional commit format and provide meaningful context for future readers.
    Be concise. Use bullet pooints
    \n\nChanges:\n" + $diff)}
]')

# ðŸš€ Send the request to OpenAI API using the correct chat endpoint
response=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$(jq -n \
        --argjson messages "$messages" \
        '{
          model: "gpt-4",
          messages: $messages,
          temperature: 0.5,
          max_tokens: 5000
        }'
)")

# ðŸ”„ Extract the AI-generated commit message
commit_message=$(printf '%s\n' "$response" | jq -r '.choices[0].message.content' | sed 's/^ *//g')

# ðŸ›‘ Check if we got a valid commit message from the AI
if [ -z "$commit_message" ] || [[ "$commit_message" == "null" ]]; then
  echo "Failed to generate a commit message from OpenAI."
  echo "API Response: $response"
  exit 1
fi

# Write the commit message to the commit message file
echo "$commit_message" > "$COMMIT_MSG_FILE"

# Also show the message in the terminal for visibility
echo "ðŸ¤– Generated commit message:"
echo "$commit_message"
