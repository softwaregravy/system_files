autoload colors && colors

function get_git_branch() {
  git branch 2>/dev/null | sed -n 's/^\* //p'
}

function get_node_env() {
    if which fnm >/dev/null 2>&1; then
      local node_version=$(fnm current 2>/dev/null)
      if [ -n "$node_version" ] && [ "$node_version" != "none" ]  && [ "$node_version" != "system" ]; then
        echo "node-${node_version#v}:"
        return
      fi
    fi
}

function get_ruby_env() {
  # Try RVM first
  if which rvm-prompt >/dev/null 2>&1; then
    local ruby_info=$(rvm-prompt 2>/dev/null)
    if [ -n "$ruby_info" ]; then
      echo "$ruby_info:"
      return
    fi
  fi

  # Try rbenv if RVM not found or not active
  if which rbenv >/dev/null 2>&1; then
    local ruby_version="$(rbenv version-name 2>/dev/null)"
    local gemset="$(rbenv gemset active 2>/dev/null | tr -d '()')"
    if [ -n "$ruby_version" ]; then
      if [ -n "$gemset" ]; then
        echo "ruby-$ruby_version@$gemset:"
      else
        echo "ruby-$ruby_version:"
      fi
    fi
  fi
}

function get_python_env() {
  if [ -n "$VIRTUAL_ENV" ]; then
    local env_name=$(basename "$VIRTUAL_ENV")
    local python_version=$(python -V 2>&1 | cut -d' ' -f2)
    echo "python-${python_version}@${env_name}:"
  elif [ -n "$CONDA_DEFAULT_ENV" ]; then
    # TODO update once we use a conda env again
    echo "conda@$CONDA_DEFAULT_ENV:"
  fi
}

function precmd() {
  # clear the hash variables
  # This fixes the problem showing ~RVM_PROJECT_PATH in the pwd
  hash -rd

  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} + 1  ))

  # Get environment info
  PR_BRANCH=$(get_git_branch)
  PR_ENV="$(get_ruby_env)$(get_python_env)$(get_node_env)"

  # Get APM (Power Management) info and set format
  if which ibam > /dev/null; then
    PR_APM_RESULT=`ibam --percentbattery`
    PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
  elif which apm > /dev/null; then
    PR_APM_RESULT=`apm`
    PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
  elif which pmset > /dev/null; then
    PR_APM_RESULT=`pmset -g batt`
    PR_APM='$PR_RED${${PR_APM_RESULT[(f)2]}[(w)3]}%%(${${PR_APM_RESULT[(f)2]}[(w)5]})$PR_LIGHT_BLUE:'
  else
    PR_APM=''
  fi

  # Initialize bars
  PR_FILLBAR=""
  PR_PWDLEN=""

  # Calculate prompt width
  local promptsize=${#${(%):---($PR_ENV$PR_BRANCH)---()--}}
  local pwdsize=${#${(%):-%~}}

  # Calculate fill bar
  if (( promptsize + pwdsize > TERMWIDTH )); then
    (( PR_PWDLEN = TERMWIDTH - promptsize ))
  else
    PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..─.)}"
  fi
}

setprompt() {
  setopt prompt_subst

  # Colors
  for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$fg_bold[${(L)color}]%}'
    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
  done
  PR_NO_COLOR="%{$reset_color%}"

  # Main prompt
  PROMPT='$PR_CYAN┌─($PR_GREEN$PR_ENV$PR_BRANCH$PR_CYAN)─${(e)PR_FILLBAR}($PR_MAGENTA%~$PR_CYAN)─┐$PR_NO_COLOR
$PR_CYAN└─(${(e)PR_APM}$PR_YELLOW%D{%H:%M}$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_CYAN)──$PR_NO_COLOR '

  # Right prompt
  RPROMPT=' $PR_CYAN─($PR_YELLOW%D{%a,%b %-d}$PR_CYAN)─┘$PR_NO_COLOR'
}

export VIRTUAL_ENV_DISABLE_PROMPT=1
setprompt
